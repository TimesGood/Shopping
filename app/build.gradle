plugins {
    id 'com.android.application'
}
android {
    namespace 'com.example.demo'
    compileSdk rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {
        applicationId rootProject.ext.android["applicationId"]
        minSdk rootProject.ext.android["minSdkVersion"]
        targetSdk rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            debuggable true
            //开启混淆开关
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //为BuildConfig.class文件添加新属性，指定主机服务器地址
            buildConfigField 'String','SERVER',getSERVER('debug','SERVER')

        }
        release {
            debuggable false
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField 'String','SERVER',getSERVER('release','SERVER')
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}
//引入依赖
dependencies {
    implementation project(path: ':core')
    implementation project(path: ':expand')
    implementation project(path: ':common')
    api rootProject.ext.support["appcompat-v7"]
    api rootProject.ext.support["design"]
    api rootProject.ext.support["junit"]
    api rootProject.ext.support["test-ext"]
    api rootProject.ext.support["test-espresso"]
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    api rootProject.ext.dependencies["banner"]

    annotationProcessor rootProject.ext.dependencies["dagger2-compiler"]
}


//获取配置文件中的内容
def getSERVER(String context,String Server) {
    def SERVER = null
    Properties properties = new Properties()
    def proFile = file("src/main/filters/"+context+"/config.properties")
    if(proFile.canRead()) {
        properties.load(new FileInputStream(proFile))
        if(properties != null) {
            SERVER = properties[Server]
        }
    }
    return SERVER
}